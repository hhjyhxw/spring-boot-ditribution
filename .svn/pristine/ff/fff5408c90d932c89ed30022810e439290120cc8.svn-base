package com.icloud.web.business.front.address;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.icloud.common.ResponseUtils;
import com.icloud.model.business.BeanAddress;
import com.icloud.model.business.BeanArea;
import com.icloud.service.business.BeanAddressService;
import com.icloud.service.business.BeanAreaService;
import com.icloud.web.AppBaseController;
import com.thoughtworks.xstream.mapper.Mapper.Null;

@Controller
@RequestMapping(value = "${frontPath}/address")
public class BeanAddressController extends AppBaseController{

	@Autowired
	private BeanAddressService beanAddressService;
	
	@Autowired
	private BeanAreaService beanAreaService;
	
	@RequestMapping("/getArea")
	public void getArea(HttpServletRequest request,
			HttpServletResponse response,BeanArea t) throws Exception {
		List<BeanArea> beanAreas = beanAreaService.findList(t);
		JSONObject jsonObject = new JSONObject();
		
		System.out.println("id :" + t.getId());
		for (BeanArea beanArea : beanAreas) {
			if (t.getId() == beanArea.getId()) {
				jsonObject.put("beanArea", beanArea);
			}
		}
		ResponseUtils.renderJson(response, jsonObject.toJSONString());
	}
	
	
	
	/**
	 * 进入收货地址编辑
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping("/toAddrEdit")
	public String toAddressEdit(HttpServletRequest request,HttpServletResponse response,
			BeanArea t,BeanAddress address) throws Exception {
		//获取用户Id
		String userId = request.getParameter("userId");
		if (userId != null) {
			address.setUserId(Long.valueOf(userId));
		}
		if (address.getId() != null) {
			address = beanAddressService.findByKey(address.getId());
		}
		List<BeanArea> beanAreas = beanAreaService.findList(t);
		request.setAttribute("address", address);
		request.setAttribute("beanAreas", beanAreas);
		return "front/address/bean_address_edit";
	}
	
	@RequestMapping("/findArea")
	public void findArea(HttpServletRequest request,HttpServletResponse response,BeanArea t) throws Exception {
		String parentId = request.getParameter("parentId");
	    int pid = 0;
	    //如果传人的parentId不为空，则赋值给pid
		if (parentId != null) {
			pid = Integer.valueOf(parentId);
		}else {
			pid = 999999;
		}
//		t.setParentId(pid);
		Long start = System.currentTimeMillis();
		List<BeanArea> beanAreas = beanAreaService.findList(t);
		Long end = System.currentTimeMillis();
		List<BeanArea> areaList = new ArrayList<>();
		
		for (BeanArea beanArea : beanAreas) {
			if (pid == beanArea.getParentId()) {
				areaList.add(beanArea);
			}
		}
		
		Map<String, Object> areaMap = new HashMap<>();
		areaMap.put("areas", areaList);
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("data", areaMap);
		jsonObject.put("Time", end-start);
		ResponseUtils.renderJson(response, jsonObject.toJSONString());
		
	}
	
	@RequestMapping("/saveAddr")
	public String saveAddress(BeanAddress beanAddr,HttpServletRequest request,HttpServletResponse response) throws Exception {
		log.warn("进入 saveAddr");
	    
        System.out.println(beanAddr);
		if (beanAddr.getId() != null) {
			beanAddressService.update(beanAddr);
		}else {
			beanAddressService.save(beanAddr);
		}
		return "redirect:getAddrList";
	}
	
	@RequestMapping("/getAddrList")
	public String getAddressList(HttpServletRequest request,HttpServletResponse response,
			BeanAddress t) throws Exception {
		//获取用户的userId
//		String userId = request.getParameter("userId");
		//log.warn("传人参数：userId:" + userId);
		//t.setUserId(1L);
		//根据用户userId查出该用户所以的收货地址
		log.warn("userId:" + t.getUserId());
		List<BeanAddress> beanAddresses = beanAddressService.findList(t);
		request.setAttribute("addrs", beanAddresses);
		request.setAttribute("userId", t.getUserId());
		return "front/address/bean_address_list";
	}
	
	@RequestMapping("/deleteAddr")
	public String deleteAddr(HttpServletRequest request,HttpServletResponse response,
			BeanAddress t) throws Exception, Exception {
		String idStr = request.getParameter("id");
		log.warn("传入删除的地址id：" + idStr);
		beanAddressService.delete(Long.valueOf(idStr));
		return "redirect:getAddrList";
	}
	
	
	
	
	
}
