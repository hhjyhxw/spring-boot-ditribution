package com.icloud.web.business.back.goods;

import java.io.File;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.icloud.common.ConfigUtil;
import com.icloud.common.Contants;
import com.icloud.common.ResponseUtils;
import com.icloud.model.bms.BmsAdmin;
import com.icloud.model.business.BeanGoods;
import com.icloud.model.business.BeanGoodsClass;
import com.icloud.model.business.BeanGoodsWithBLOBs;
import com.icloud.service.business.BeanGoodsClassService;
import com.icloud.service.business.BeanGoodsService;
import com.icloud.web.BaseController;

/**
 * 后台商品管理
 * @author zdh
 *
 */
@Controller
@RequestMapping(value = "${backPath}/beanGoods")
public class BeanGoodsBackController extends BaseController<BeanGoods>{

	@Autowired
	private BeanGoodsService beanGoodsService;
	@Autowired
	private BeanGoodsClassService beanGoodsClassService;
	
	/**
	 * 获取列表
	 */
	@RequestMapping(value = "/list")
	@Override
	public String list(HttpServletRequest request, BeanGoods t)
			throws Exception {
		t.setDeleteStatus("0");//删除未删除的商品
		PageInfo<BeanGoods> page = beanGoodsService.findByPage(1, 10, t);
		request.setAttribute("page", page);
		request.setAttribute("record", t);
		BeanGoodsClass gooClass = new BeanGoodsClass();
		gooClass.setStatus("1");
		request.setAttribute("goodClassList",beanGoodsClassService.findList(gooClass));
		return "business/goods/bean_goods_list";
	}

	/**
	 * 异步翻页
	 */
	@RequestMapping(value = "/getList")
	@Override
	public String getList(HttpServletRequest request,HttpServletResponse response) throws Exception {
		String name = request.getParameter("name");	
		String status = request.getParameter("status");	
		String deleteStatus = request.getParameter("deleteStatus");
		String categoriesId = request.getParameter("categoriesId");	
		String pageNo = request.getParameter("pageNo");	
		String pageSize = request.getParameter("pageSize");	
		BeanGoods t = new BeanGoods();
		if(StringUtils.isNotBlank(name)){
			t.setName(name);
		}
		if(StringUtils.isNotBlank(deleteStatus)){
			t.setDeleteStatus(deleteStatus);
		}
		if(StringUtils.isNotBlank(status)){
			t.setStatus(status);
		}
		if(StringUtils.isNotBlank(categoriesId)){
			t.setCategoriesId(Integer.parseInt(categoriesId));
		}
		t.setDeleteStatus("0");//删除未删除的商品
		PageInfo<BeanGoods> page = beanGoodsService
				.findByPage(StringUtils.isNotBlank(pageNo)?Integer.parseInt(pageNo):1, StringUtils.isNotBlank(pageSize)?Integer.parseInt(pageSize):10, t);
		List<BeanGoods> list = page.getList();
		JSONObject json = new JSONObject();
		json.put("pages",page.getPages());
		JSONArray array = new JSONArray();
		for(BeanGoods s:list){
			JSONObject sub = new JSONObject();
			sub.put("id",s.getId());
			sub.put("name", s.getName());
			sub.put("goodImage", s.getGoodImage());
			sub.put("status", s.getStatus());
			array.add(sub);
		}
		json.put("list", array);
		ResponseUtils.renderJson(response, json.toJSONString());
		return null;
	}

	/**
	 * 跳转添加编辑页
	 */
	@RequestMapping(value = "/toinput")
	@Override
	public String toinput(Integer id, HttpServletRequest request)throws Exception {
		BeanGoodsWithBLOBs record = null;
		if(id!=null){
			record = beanGoodsService.findByKey(id);
		}
		BeanGoodsClass gooClass = new BeanGoodsClass();
		gooClass.setStatus("1");
		request.setAttribute("goodClassList",beanGoodsClassService.findList(gooClass));
		request.setAttribute("record", record);
		return "business/goods/bean_goods_input";
	}

	/**
	 * 新增或者修改
	 */
	@RequestMapping(value = "/input")
	public String input(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("pfile") MultipartFile pfile,BeanGoodsWithBLOBs t)throws Exception {
		BmsAdmin admin = (BmsAdmin) request.getSession().getAttribute("admin_user");
		if(admin!=null){
			t.setOperator(admin.getAccount());
		}
		t.setOperateIp(request.getRemoteAddr());
		t.setModifyTime(new Date());
		if(t.getAddstore()!=null){
			t.setStore(t.getStore()+t.getAddstore());
		}
		//添加
		if(t.getId()==null){
			String fileName = pfile.getOriginalFilename();
			fileName = UUID.randomUUID().toString().replace("-", "")+"_"+fileName;
			//文件存储的相对路径
            String basePath = Contants.IMG_BASE_PATH_;
            //获取项目根路径的绝对路径
            String realPath = request.getSession().getServletContext().getRealPath(basePath); 
            log.error(realPath);
    		File dirFile = new File(realPath);
    		if (!dirFile.exists()) {
    			dirFile.mkdirs();
    		}
    		//上传新图片
    		pfile.transferTo(new File(dirFile+"/"+fileName));  
    		t.setGoodImage(basePath+fileName);
    		t.setFreezeStore(0);
			t.setDeleteStatus("0");
			t.setRealSales(0);
			if(t.getVirtlSales()==null){
				t.setVirtlSales(0);
			}
			t.setCreateTime(new Date());
			beanGoodsService.save(t);
			return "redirect:"+ConfigUtil.getBackPath()+"/beanGoods/list";
		}else{//修改
			//判断是否更新了商品主图,没有 则直接更新，有就上传再更新
			String fileName = pfile.getOriginalFilename();
			if("".equals(fileName) || fileName == null){
				t.setGoodImage(null);
				beanGoodsService.update(t);
				return "redirect:"+ConfigUtil.getBackPath()+"/beanGoods/list";
			}else{
				fileName = UUID.randomUUID().toString().replace("-", "")+"_"+fileName;
				//文件存储的相对路径
	            String basePath = Contants.IMG_BASE_PATH_;
	            //获取项目根路径的绝对路径
	            String realPath = request.getSession().getServletContext().getRealPath(basePath); 
	            log.error(realPath);
	    		File dirFile = new File(realPath);
	    		if (!dirFile.exists()) {
	    			dirFile.mkdirs();
	    		}
	    		//上传新图片
	    		pfile.transferTo(new File(dirFile+"/"+fileName));  
				//先删除原图片
				String originalFileName =t.getGoodImage();
				File originalFile = new File(originalFileName);
	        	originalFile.delete();
	        	//替换新的图片并保存记录
				t.setGoodImage(basePath+fileName);
				beanGoodsService.update(t);
				return "redirect:"+ConfigUtil.getBackPath()+"/beanGoods/list";
			}
		}
	}

	@Override
	public String del(Integer id, HttpServletResponse response){
		 try {
			beanGoodsService.delete(id);
			ResponseUtils.renderHtml(response, "0000");
			return null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		ResponseUtils.renderHtml(response, "1000");
		return null;
		
	}

	@Override
	public String input(HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		return null;
	}


}
