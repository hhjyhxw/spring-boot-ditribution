/**
 * @author
 * @version
 * 2018年2月28日 上午11:12:44
 */
package com.icloud.service.business;

import java.util.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.icloud.exceptions.BeanException;
import com.icloud.model.business.BeanCouponConsumeRecord;
import com.icloud.model.business.BeanFans;
import com.icloud.model.business.BeanGoods;
import com.icloud.model.business.BeanOrder;
import com.icloud.model.business.BeanOrderItem;
import com.icloud.service.interfaces.CouponInterfaceService;
import com.icloud.service.interfaces.SmokeBeanInterfaceService;
import com.icloud.service.interfaces.impl.SmokeBeanInterfaceServiceImpl;
import com.icloud.service.redis.RedisService;
import com.icloud.web.util.OrderUtil;

/**
 * 类名称: ExChangeServiceImpl
 * 类描述: 
 * 创建人: zhangdehai
 * 创建时间:2018年2月28日 上午11:12:44
 */
@Service
public class ExChangeServiceImpl implements ExChangeService{
	
	private final static Logger log = LoggerFactory.getLogger(ExChangeServiceImpl.class);
	@Autowired
	private BeanGoodsService beanGoodsService;
	@Qualifier("couponInterfaceServiceImpl")
	private CouponInterfaceService couponInterfaceServiceImpl;
	@Autowired 
	private BeanOrderService beanOrderService;
	@Autowired
	private BeanOrderItemService beanOrderItemService;
	@Autowired
	@Qualifier("smokeBeanInterfaceServiceImpl")
	private SmokeBeanInterfaceService smokeBeanInterfaceServiceImpl;
	@Autowired
	private RedisService redisService;
	@Autowired
	private BeanCouponConsumeRecordService beanCouponConsumeRecordService;
	
	/**
	* Description:兑换商品
	* @author zhangdehai
	* @param ticket_id 优惠券Id
	* @param ticketValue 优惠券值
	* @param goodsId 商品id
	* @param exChangeNum 兑换数量
	* @param beanFans	用户对象
	* @return  
	* @date 2018年2月28日下午2:49:22
	 */
	@Transactional
	@Override
	public void exChangeGoods(String ticket_id, Integer ticketValue,Integer goodsId,Integer exChangeNum,BeanFans beanFans) {
			//1、保存订单
			BeanGoods beanGoods = beanGoodsService.findByKey(goodsId);
			if(beanGoods==null){
				throw new BeanException("兑换时,获取商品对象为空");
			}
			BeanOrder beanOrder = createBeanOrder(ticket_id, ticketValue, exChangeNum, beanGoods,beanFans);
			beanOrderService.save(beanOrder);
			BeanOrderItem beanOrderItem = createBeanOrderItem(beanOrder, exChangeNum, beanGoods);
			//2、保存订单明细
			beanOrderItemService.save(beanOrderItem);
			//3、保存优惠券消费流水
			BeanCouponConsumeRecord consumeRecord = createBeanCouponConsumeRecord(ticket_id, exChangeNum, "0", beanFans.getId());
			beanCouponConsumeRecordService.save(consumeRecord);
			//4、更新库存
			
			if(beanGoods.getScore()-beanGoods.getFreezeStore()<exChangeNum){
				log.error("商品库存不足");
				throw new BeanException("商品库存不足");
			}
			beanGoods.setNum(beanGoods.getFreezeStore());
			beanGoods.setFreezeStore(beanGoods.getFreezeStore()+exChangeNum);
			beanGoods.setRealSales(beanGoods.getRealSales()+exChangeNum);
			beanGoods.setVirtlSales(beanGoods.getVirtlSales()+exChangeNum);
			int result = beanGoodsService.updateGoodsStore(beanGoods);
			if(result==0){
				log.error("兑换时,更新商品库存失败");
				throw new BeanException("系统繁忙,请稍后再试");
			}
			
			//5、扣减乐豆接口
			 Map<String, String> beanMap = smokeBeanInterfaceServiceImpl.consumeFansBeans(beanFans.getOpenid(), beanOrder.getOrderNo(), beanOrder.getScore().toString(),"乐豆商城兑换", "乐豆商城兑换");
			 if(beanMap==null || beanMap.get("status")==null ){
				 	log.error("扣减乐豆接口返回值");
					throw new BeanException("扣减乐豆失败");
			 }
			 if(!"0".equals(beanMap.get("status").toString())){
				 throw new BeanException( SmokeBeanInterfaceServiceImpl.getBeanCodeMap().get(beanMap.get("status").toString()));
			 }
			 //6、消费优惠券接口
			 Map<String,String> couponMap = couponInterfaceServiceImpl.consumeCoupon(ticket_id, beanFans.getOpenid());
			 if(couponMap==null || couponMap.get("code")==null){
				 beanMap = smokeBeanInterfaceServiceImpl.rechargeFansBeans(beanFans.getOpenid(), beanOrder.getOrderNo()+"_2", beanOrder.getOrderNo()+"_1", beanOrder.getScore().toString(), "15", "乐豆商城退款", "乐豆商城退款");
				 log.error("调用扣减优惠券接口返回空值");
				 throw new BeanException("使用优惠券失败");
			 }
			 if(!"0".equals(couponMap.get("code"))){
				 beanMap = smokeBeanInterfaceServiceImpl.rechargeFansBeans(beanFans.getOpenid(), beanOrder.getOrderNo()+"_2", beanOrder.getOrderNo()+"_1", beanOrder.getScore().toString(), "15", "乐豆商城退款", "乐豆商城退款");
				 throw new BeanException(couponMap.get("msg"));
			 }
	}

	/**
	* Description:创建订单实体
	* @author zhangdehai
	* @param ticket_id 优惠券Id
	* @param ticketValue 优惠券值
	* @param goodsId 商品id
	* @param exChangeNum 兑换数量
	* @param beanGoods	商品
	* @param beanFans	用户对象
	* @return  
	* @date 2018年2月28日下午2:49:22
	 */
	private BeanOrder createBeanOrder(String ticket_id, Integer ticketValue,
			Integer exChangeNum,BeanGoods beanGoods,BeanFans beanFans){
		BeanOrder beanOrder = new BeanOrder();
		beanOrder.setCoupon(ticketValue);//优惠券值
		beanOrder.setCouponId(ticket_id);//优惠券id
		beanOrder.setCreateTime(new Date());
		beanOrder.setOrderStatus("0");//新建 未完成
		String lastString = beanOrderService.getLastOrderNo();
		beanOrder.setOrderNo(OrderUtil.bulidOrderNo(lastString));
		beanOrder.setOrderType("0");//0 默认兑换订单
		beanOrder.setGoodName(beanGoods.getName());
		beanOrder.setScore(beanGoods.getScore()*exChangeNum-ticketValue);
		beanOrder.setShippingStatus("0");//未发货
		beanOrder.setDeleteStatus("0");//未删除
		beanOrder.setUserId(beanFans.getId());
		beanOrder.setOpenid(beanFans.getOpenid());
		return beanOrder;
	}
	
	/**
	* Description:创建订单明细
	* @author zhangdehai
	* @param order
	* @param exChangeNum
	* @param beanGoods
	* @return  
	* @date 2018年2月28日下午2:47:00
	 */
	private BeanOrderItem createBeanOrderItem(BeanOrder order,Integer exChangeNum,BeanGoods beanGoods){
		BeanOrderItem item = new BeanOrderItem();
		item.setCoupon(order.getCoupon());
		item.setGoodId(beanGoods.getId());
		item.setGoodImage(beanGoods.getGoodImage());
		item.setGoodName(beanGoods.getName());
		item.setGoodQuantities(exChangeNum);
		item.setOrderId(order.getId());
		item.setScore(beanGoods.getScore());
		return item;
		
	}
	
	/**
	* Description:创建优惠券
	* @author zhangdehai
	* @param ticket_id优惠券id
	* @param ticketValue  优惠券面值
	* @param type 来源  0紫光游戏， 。。。。。
	* @param userId 用户id
	* @return  
	* @date 2018年2月28日下午2:46:43
	 */
	private BeanCouponConsumeRecord createBeanCouponConsumeRecord(String ticket_id, Integer ticketValue,String type,Long userId){
		BeanCouponConsumeRecord consumeRecod = new BeanCouponConsumeRecord();
		consumeRecod.setAmount(ticketValue.longValue());
		consumeRecod.setCouponId(ticket_id);
		consumeRecod.setCreateTime(new Date());
		consumeRecod.setType(type);
		consumeRecod.setUserId(userId);
		return consumeRecod;
	}
}
